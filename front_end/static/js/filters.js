// Generated by CoffeeScript 2.0.0-beta5
angular.module('episodeGet.filter', []).filter('tagStyle', function () {
  return function (input) {
    switch (input) {
    case 'TM':
      return '\u5b57\u5e55\u7ec4';
    case 'TL':
      return '\u4f5c\u54c1\u540d';
    case 'CL':
      return '\u6e05\u6670\u5ea6';
    case 'FM':
      return '\u683c\u5f0f';
    case 'LG':
      return '\u5b57\u5e55\u8bed\u8a00';
    default:
      return '\u4e0d\u77e5\u9053';
    }
  };
}).filter('getTagNameById', [
  'tagsListService',
  function (tagsListService) {
    return function (input, sort) {
      var cache$, cache$1;
      cache$ = null != (cache$1 = tagsListService.list[angular.lowercase(sort)][input]) ? cache$1.title : void 0;
      return null != cache$ ? cache$ : '';
    };
  }
]).filter('niceTime', [function () {
    return function (input) {
      var days, hours, longtime, minutes, months, myDate, nowtime, second, twomonths;
      second = 1e3;
      minutes = second * 60;
      hours = minutes * 60;
      days = hours * 24;
      months = days * 30;
      twomonths = days * 365;
      myDate = new Date(Date.parse(input));
      if (isNaN(myDate))
        myDate = new Date(input.replace(/-/g, '/'));
      nowtime = new Date;
      longtime = nowtime.getTime() - myDate.getTime();
      switch (false) {
      case !(longtime > months):
        return '' + Math.floor(longtime / months) + '\u4e2a\u6708\u524d';
      case !(longtime > days):
        return '' + Math.floor(longtime / (days * 7)) + '\u5468\u524d';
      case !(longtime > days):
        return '' + Math.floor(longtime / days) + '\u5929\u524d';
      case !(longtime > hours):
        return '' + Math.floor(longtime / hours) + '\u5c0f\u65f6\u524d';
      case !(longtime > minutes):
        return '' + Math.floor(longtime / minutes) + '\u5206\u949f\u524d';
      default:
        return '\u521a\u521a';
      }
    };
  }]).filter('averageDate', [function () {
    return function (rssList) {
      var count, counter, day, id, lastCount, myDate, result, rss, weekDay, weekDays, weekHour;
      counter = weekDay = weekHour = 0;
      weekDays = {
        0: 0,
        1: 0,
        2: 0,
        3: 0,
        4: 0,
        5: 0,
        6: 0
      };
      result = '';
      for (id in rssList) {
        rss = rssList[id];
        myDate = new Date(Date.parse(rss.timestamp));
        if (isNaN(myDate))
          myDate = new Date(rss.timestamp.replace(/-/g, '/'));
        weekDays[myDate.getDay()]++;
        weekHour += myDate.getHours();
        counter++;
      }
      lastCount = 0;
      for (day in weekDays) {
        count = weekDays[day];
        if (count > lastCount)
          weekDay = day;
      }
      weekHour = weekHour / counter;
      result = function () {
        switch (parseInt(weekDay, 10)) {
        case 0:
          return '\u661f\u671f\u5929';
        case 1:
          return '\u661f\u671f\u4e00';
        case 2:
          return '\u661f\u671f\u4e8c';
        case 3:
          return '\u661f\u671f\u4e09';
        case 4:
          return '\u661f\u671f\u56db';
        case 5:
          return '\u661f\u671f\u4e94';
        case 6:
          return '\u661f\u671f\u516d';
        default:
          return '\u4e0d\u5b9a\u65f6';
        }
      }.call(this);
      return result += function () {
        switch (false) {
        case !(weekHour < 6):
          return '\u51cc\u6668';
        case !(weekHour < 12):
          return '\u65e9\u4e0a';
        case !(weekHour < 18):
          return '\u4e0b\u5348';
        default:
          return '\u665a\u4e0a';
        }
      }.call(this);
    };
  }]);
