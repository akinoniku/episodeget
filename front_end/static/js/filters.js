// Generated by CoffeeScript 1.6.2
(function() {
  angular.module('episodeGet.filter', []).filter('tagStyle', function() {
    return function(input) {
      switch (input) {
        case 'TM':
          return '字幕组';
        case 'TL':
          return '作品名';
        case 'CL':
          return '清晰度';
        case 'FM':
          return '格式';
        case 'LG':
          return '字幕语言';
        default:
          return '不知道';
      }
    };
  }).filter('getTagNameById', [
    'tagsListService', function(tagsListService) {
      return function(input, sort) {
        var _ref, _ref1;

        return (_ref = (_ref1 = tagsListService.list[angular.lowercase(sort)][input]) != null ? _ref1.title : void 0) != null ? _ref : '';
      };
    }
  ]).filter('niceTime', [
    function() {
      return function(input) {
        var days, hours, longtime, minutes, months, myDate, nowtime, second, twomonths;

        second = 1000;
        minutes = second * 60;
        hours = minutes * 60;
        days = hours * 24;
        months = days * 30;
        twomonths = days * 365;
        myDate = new Date(Date.parse(input));
        if (isNaN(myDate)) {
          myDate = new Date(input.replace(/-/g, "/"));
        }
        nowtime = new Date();
        longtime = nowtime.getTime() - myDate.getTime();
        switch (false) {
          case !(longtime > months):
            return "" + (Math.floor(longtime / months)) + "个月前";
          case !(longtime > days):
            return "" + (Math.floor(longtime / (days * 7))) + "周前";
          case !(longtime > days):
            return "" + (Math.floor(longtime / days)) + "天前";
          case !(longtime > hours):
            return "" + (Math.floor(longtime / hours)) + "小时前";
          case !(longtime > minutes):
            return "" + (Math.floor(longtime / minutes)) + "分钟前";
          default:
            return "刚刚";
        }
      };
    }
  ]).filter('averageDate', [
    function() {
      return function(rssList) {
        var count, counter, day, id, lastCount, myDate, result, rss, weekDay, weekDays, weekHour;

        counter = weekDay = weekHour = 0;
        weekDays = {
          0: 0,
          1: 0,
          2: 0,
          3: 0,
          4: 0,
          5: 0,
          6: 0
        };
        result = '';
        for (id in rssList) {
          rss = rssList[id];
          myDate = new Date(Date.parse(rss.timestamp));
          if (isNaN(myDate)) {
            myDate = new Date(rss.timestamp.replace(/-/g, "/"));
          }
          weekDays[myDate.getDay()]++;
          weekHour += myDate.getHours();
          counter++;
        }
        lastCount = 0;
        for (day in weekDays) {
          count = weekDays[day];
          if (count > lastCount) {
            weekDay = day;
          }
        }
        weekHour = weekHour / counter;
        result = (function() {
          switch (parseInt(weekDay, 10)) {
            case 0:
              return '星期天';
            case 1:
              return '星期一';
            case 2:
              return '星期二';
            case 3:
              return '星期三';
            case 4:
              return '星期四';
            case 5:
              return '星期五';
            case 6:
              return '星期六';
            default:
              return '不定时';
          }
        })();
        return result += (function() {
          switch (false) {
            case !(weekHour < 6):
              return '凌晨';
            case !(weekHour < 12):
              return '早上';
            case !(weekHour < 18):
              return '下午';
            default:
              return '晚上';
          }
        })();
      };
    }
  ]);

}).call(this);
